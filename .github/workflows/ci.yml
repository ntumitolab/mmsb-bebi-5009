name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  LITERATE_PROC: '2'
  NBCONVERT_JOBS: '2'
  JULIA_NUM_THREADS: '2'
  ALLOWERRORS: 'false'
  NBCACHE: '.cache'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'
  UV_SYSTEM_PYTHON: 1

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.x'
        check-latest: true
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
    - name: Install Python dependencies
      run: uv pip install -r requirements.txt
    - name: Read Julia version
      id: julia-version
      run: python -c 'import tomllib; from pathlib import Path; print("resolved=", tomllib.loads(Path("Manifest.toml").read_text())["julia_version"])' >> "$GITHUB_OUTPUT"
    - name: Get environment hash
      id: hash
      run: |
        echo "value=${{ hashFiles('Project.toml', 'Manifest.toml', 'src/**') }}" >> "$GITHUB_OUTPUT"
        echo "ver=${{ runner.os }}-julia-${{ steps.julia-version.outputs.resolved }}" >> "$GITHUB_OUTPUT"
    - name: Cache executed notebooks
      uses: actions/cache@v4
      id: cache-nb
      with:
        path: |
          ${{ env.NBCACHE }}/**/*.ipynb
          ${{ env.NBCACHE }}/**/*.sha
        key: notebook-${{ steps.hash.outputs.value }}-${{ hashFiles('docs/**/*.ipynb', 'docs/**/*.jl') }}
        restore-keys: |
          notebook-${{ steps.hash.outputs.value }}-
    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: ${{ steps.julia-version.outputs.resolved }}
    - name: Restore Julia packages
      uses: actions/cache/restore@v4
      if: ${{ runner.environment == 'github-hosted' }}
      id: cache-julia
      with:
        path: ~/.julia
        key: ${{ steps.hash.outputs.ver }}-${{ steps.hash.outputs.value }}
        restore-keys: |
          ${{ steps.hash.outputs.ver }}-
    - name: Install Julia packages
      if: ${{ runner.environment == 'self-hosted' || steps.cache-julia.outputs.cache-hit != 'true' }}
      shell: julia --color=yes {0}
      run: |
        using Pkg
        Pkg.add(["Literate", "Tables", "MarkdownTables", "JSON", "IJulia"])
        Pkg.activate(".")
        Pkg.instantiate()
        Pkg.precompile()
    - name: Clean Julia package directory
      if: ${{ runner.environment == 'github-hosted' && steps.cache-julia.outputs.cache-hit != 'true' }}
      shell: julia --color=yes {0}
      run: |
        using Pkg, Dates
        Pkg.gc(collect_delay=Day(0))
    - name: Save Julia packages
      uses: actions/cache/save@v4
      if: ${{ runner.environment == 'github-hosted' && steps.cache-julia.outputs.cache-hit != 'true' }}
      with:
        path: ~/.julia
        key: ${{ steps.cache-julia.outputs.cache-primary-key }}
    - name: Run notebooks
      if: ${{ steps.cache-nb.outputs.cache-hit != 'true' }}
      run: julia --project=@. --color=yes -p ${{ env.LITERATE_PROC }} .github/ci.jl
    - name: Copy back built notebooks
      run: cp --verbose -rf ${{ env.NBCACHE }}/docs/* docs/
    - name: Build website
      run: jupyter-book build docs/
    - name: Upload pages artifact
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html/

  # Notebook branch
  notebook:
    name: Deploy notebook branch
    needs: CI
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
    - name: Convert literate files to Jupyter notebooks
      shell: julia --color=yes {0}
      working-directory: docs
      run: |
        import Pkg
        Pkg.add("Literate")
        using Literate
        for (root, dirs, files) in walkdir(pwd())
          for file in files
            if endswith(file, ".jl")
              nb = joinpath(root, file)
              Literate.notebook(nb, dirname(nb); mdstrings=true, execute=false)
            end
          end
        end
    - name: Deploy pages
      uses: JamesIves/github-pages-deploy-action@v4
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        folder: .
        branch: ipynb
        commit-message: ${{ github.event.head_commit.message }}

  # Deployment job
  deploy:
    name: Deploy to GitHub pages
    needs: CI
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
